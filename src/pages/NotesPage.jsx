// src/pages/NotesPage.jsx

import { useState, useEffect } from 'react';
import { supabase } from '../supabaseClient';
import useVoiceRecording from '../hooks/useVoiceRecording';

function NotesPage() {
    const [notes, setNotes] = useState([]);
    const [newNoteContent, setNewNoteContent] = useState('');
    const [loading, setLoading] = useState(true);
    const [isSubmitting, setIsSubmitting] = useState(false);
    const [showAudioPlayer, setShowAudioPlayer] = useState(false);

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π —Ö—É–∫ –∑–∞–ø–∏—Å–∏
    const {
        isRecording,
        audioBlob,
        audioUrl,
        error: recordingError,
        recordingTime,
        isSupported,
        startRecording,
        stopRecording,
        resetRecording,
        formatTime
    } = useVoiceRecording();

    // –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–º–µ—Ç–æ–∫
    const fetchNotes = async () => {
        const { data, error } = await supabase
            .from('notes')
            .select('*')
            .order('created_at', { ascending: false });

        if (error) console.error("–û—à–∏–±–∫–∞:", error);
        else setNotes(data);
        setLoading(false);
    };

    useEffect(() => {
        fetchNotes();
    }, []);

    // –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–∏–≥—Ä—ã–≤–∞—Ç–µ–ª—å –ø–æ—Å–ª–µ –∑–∞–ø–∏—Å–∏
    useEffect(() => {
        if (audioUrl) {
            setShowAudioPlayer(true);
        }
    }, [audioUrl]);

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–º–µ—Ç–∫–∏ (—Ç–µ–∫—Å—Ç–æ–≤–æ–π)
    const handleAddNote = async (e) => {
        e.preventDefault();
        if (!newNoteContent.trim()) return;

        setIsSubmitting(true);
        const { data: { user } } = await supabase.auth.getUser();
        const { error } = await supabase
            .from('notes')
            .insert([{
                content: newNoteContent,
                user_id: user.id,
                type: 'text'
            }]);

        if (error) {
            alert(error.message);
        } else {
            setNewNoteContent('');
            await fetchNotes();
        }
        setIsSubmitting(false);
    };

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤–æ–π –∑–∞–º–µ—Ç–∫–∏
    const handleSaveVoiceNote = async () => {
        if (!audioBlob) return;

        setIsSubmitting(true);
        const { data: { user } } = await supabase.auth.getUser();

        try {
            // 1. –ó–∞–≥—Ä—É–∂–∞–µ–º –∞—É–¥–∏–æ —Ñ–∞–π–ª –≤ Supabase Storage
            const fileName = `voice_note_${Date.now()}.webm`;
            const { error: uploadError } = await supabase.storage
                .from('voice-notes') // –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ bucket —Å–æ–∑–¥–∞–Ω –≤ Supabase
                .upload(`${user.id}/${fileName}`, audioBlob, {
                    contentType: audioBlob.type,
                    upsert: false
                });

            if (uploadError) throw uploadError;

            // 2. –ü–æ–ª—É—á–∞–µ–º –ø—É–±–ª–∏—á–Ω—ã–π URL
            const { data: urlData } = supabase.storage
                .from('voice-notes')
                .getPublicUrl(`${user.id}/${fileName}`);

            // 3. –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø–∏—Å—å –≤ –ë–î
            const { error: insertError } = await supabase
                .from('notes')
                .insert([{
                    content: `üé§ –ì–æ–ª–æ—Å–æ–≤–∞—è –∑–∞–º–µ—Ç–∫–∞ (${formatTime(recordingTime)})`,
                    audio_url: urlData.publicUrl,
                    user_id: user.id,
                    type: 'voice'
                }]);

            if (insertError) throw insertError;

            // –£—Å–ø–µ—Ö
            resetRecording();
            setShowAudioPlayer(false);
            await fetchNotes();

        } catch (err) {
            console.error('Error saving voice note:', err);
            alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≥–æ–ª–æ—Å–æ–≤–æ–π –∑–∞–º–µ—Ç–∫–∏: ' + err.message);
        }

        setIsSubmitting(false);
    };

    // –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏
    const handleDeleteNote = async (noteId, audioUrl) => {
        if (!window.confirm("–£–¥–∞–ª–∏—Ç—å —ç—Ç—É –∑–∞–º–µ—Ç–∫—É?")) return;

        // –ï—Å–ª–∏ —ç—Ç–æ –≥–æ–ª–æ—Å–æ–≤–∞—è –∑–∞–º–µ—Ç–∫–∞, —É–¥–∞–ª—è–µ–º –∏ —Ñ–∞–π–ª
        if (audioUrl) {
            const filePath = audioUrl.split('/voice-notes/')[1];
            if (filePath) {
                await supabase.storage
                    .from('voice-notes')
                    .remove([filePath]);
            }
        }

        const { error } = await supabase
            .from('notes')
            .delete()
            .eq('id', noteId);

        if (error) {
            alert(error.message);
        } else {
            await fetchNotes();
        }
    };

    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏
    const handleToggleRecording = () => {
        if (isRecording) {
            stopRecording();
        } else {
            startRecording();
        }
    };

    return (
        <div className="max-w-6xl mx-auto">
            <h1 className="text-3xl font-bold text-gray-800 mb-6">–ó–∞–º–µ—Ç–∫–∏</h1>

            {/* –§–æ—Ä–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏ */}
            <div className="bg-white p-6 rounded-lg shadow-md mb-8">
                <form onSubmit={handleAddNote}>
                    <label htmlFor="note-content" className="block text-lg font-semibold mb-2">
                        –ù–æ–≤–∞—è –∑–∞–º–µ—Ç–∫–∞
                    </label>
                    <textarea
                        id="note-content"
                        value={newNoteContent}
                        onChange={(e) => setNewNoteContent(e.target.value)}
                        placeholder="–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–π –≤–≤–æ–¥..."
                        className="w-full h-28 p-3 border rounded-md focus:ring-2 focus:ring-indigo-500 transition resize-none"
                        disabled={isRecording || showAudioPlayer}
                    />

                    <div className="flex items-center gap-4 mt-4 flex-wrap">
                        {/* –ö–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ */}
                        <button
                            type="submit"
                            disabled={isSubmitting || !newNoteContent.trim() || isRecording || showAudioPlayer}
                            className="px-6 py-2 bg-indigo-600 text-white font-semibold rounded-md hover:bg-indigo-700 disabled:bg-gray-400 disabled:cursor-not-allowed transition"
                        >
                            {isSubmitting ? '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...' : '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç'}
                        </button>

                        {/* –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å */}
                        <span className="text-gray-400">–∏–ª–∏</span>

                        {/* –ì–æ–ª–æ—Å–æ–≤–æ–π –≤–≤–æ–¥ */}
                        {isSupported ? (
                            <div className="flex items-center gap-3">
                                <button
                                    type="button"
                                    onClick={handleToggleRecording}
                                    disabled={showAudioPlayer || isSubmitting}
                                    className={`p-3 rounded-full transition-all transform hover:scale-105 disabled:opacity-50 disabled:cursor-not-allowed ${
                                        isRecording 
                                            ? 'bg-red-500 text-white animate-pulse shadow-lg' 
                                            : 'bg-gray-200 text-gray-700 hover:bg-gray-300'
                                    }`}
                                    title={isRecording ? "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–ø–∏—Å—å" : "–ù–∞—á–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤—É—é –∑–∞–ø–∏—Å—å"}
                                >
                                    <svg className="w-6 h-6" fill="currentColor" viewBox="0 0 20 20">
                                        <path fillRule="evenodd" d="M7 4a3 3 0 016 0v4a3 3 0 11-6 0V4zm4 10.93A7.001 7.001 0 0017 8h-1a6 6 0 11-12 0H3a7.001 7.001 0 006 6.93V17H7v1h6v-1h-2v-2.07z" clipRule="evenodd" />
                                    </svg>
                                </button>
                                {isRecording && (
                                    <div className="flex items-center gap-2">
                                        <div className="w-3 h-3 bg-red-500 rounded-full animate-pulse"></div>
                                        <span className="text-sm text-red-600 font-medium">
                                            –ó–∞–ø–∏—Å—å: {formatTime(recordingTime)}
                                        </span>
                                    </div>
                                )}
                            </div>
                        ) : (
                            <p className="text-sm text-gray-500 bg-gray-100 px-3 py-2 rounded-md">
                                ‚ö†Ô∏è –ì–æ–ª–æ—Å–æ–≤–æ–π –≤–≤–æ–¥ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤ –≤–∞—à–µ–º –±—Ä–∞—É–∑–µ—Ä–µ
                            </p>
                        )}
                    </div>

                    {/* –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ */}
                    {recordingError && (
                        <div className="mt-4 p-3 bg-red-50 border border-red-200 rounded-md">
                            <p className="text-sm text-red-600">‚ùå {recordingError}</p>
                        </div>
                    )}

                    {/* –ü—Ä–æ–∏–≥—Ä—ã–≤–∞—Ç–µ–ª—å –ø–æ—Å–ª–µ –∑–∞–ø–∏—Å–∏ */}
                    {showAudioPlayer && audioUrl && (
                        <div className="mt-4 p-4 bg-green-50 border border-green-200 rounded-md">
                            <p className="text-sm font-semibold text-green-700 mb-2">
                                ‚úÖ –ó–∞–ø–∏—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ({formatTime(recordingTime)})
                            </p>
                            <audio
                                src={audioUrl}
                                controls
                                className="w-full mb-3"
                                style={{ height: '40px' }}
                            />
                            <div className="flex gap-3">
                                <button
                                    type="button"
                                    onClick={handleSaveVoiceNote}
                                    disabled={isSubmitting}
                                    className="px-4 py-2 bg-green-600 text-white rounded-md hover:bg-green-700 disabled:bg-gray-400 transition text-sm"
                                >
                                    {isSubmitting ? '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...' : '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤—É—é –∑–∞–º–µ—Ç–∫—É'}
                                </button>
                                <button
                                    type="button"
                                    onClick={() => {
                                        resetRecording();
                                        setShowAudioPlayer(false);
                                    }}
                                    disabled={isSubmitting}
                                    className="px-4 py-2 bg-gray-200 text-gray-700 rounded-md hover:bg-gray-300 disabled:bg-gray-100 transition text-sm"
                                >
                                    –û—Ç–º–µ–Ω–∏—Ç—å
                                </button>
                            </div>
                        </div>
                    )}
                </form>
            </div>

            {/* –°–ø–∏—Å–æ–∫ –∑–∞–º–µ—Ç–æ–∫ */}
            <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6">
                {loading ? (
                    <p className="text-gray-500">–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–º–µ—Ç–æ–∫...</p>
                ) : notes.length === 0 ? (
                    <p className="text-gray-500 col-span-full text-center py-8">
                        –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–º–µ—Ç–æ–∫. –°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—É—é!
                    </p>
                ) : (
                    notes.map(note => (
                        <div
                            key={note.id}
                            className="bg-yellow-100 p-4 rounded-lg shadow-sm relative group hover:shadow-md transition"
                        >
                            {/* –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è */}
                            <button
                                onClick={() => handleDeleteNote(note.id, note.audio_url)}
                                className="absolute top-2 right-2 w-6 h-6 flex items-center justify-center text-gray-400 hover:text-red-600 hover:bg-red-50 rounded-full opacity-0 group-hover:opacity-100 transition-all"
                                title="–£–¥–∞–ª–∏—Ç—å –∑–∞–º–µ—Ç–∫—É"
                            >
                                ‚úï
                            </button>

                            {/* –ö–æ–Ω—Ç–µ–Ω—Ç –∑–∞–º–µ—Ç–∫–∏ */}
                            <p className="text-gray-800 whitespace-pre-wrap mb-3">
                                {note.content}
                            </p>

                            {/* –ê—É–¥–∏–æ –ø–ª–µ–µ—Ä –¥–ª—è –≥–æ–ª–æ—Å–æ–≤—ã—Ö –∑–∞–º–µ—Ç–æ–∫ */}
                            {note.audio_url && (
                                <audio
                                    src={note.audio_url}
                                    controls
                                    className="w-full mb-2"
                                    style={{ height: '35px' }}
                                />
                            )}

                            {/* –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è */}
                            <p className="text-xs text-gray-500 text-right">
                                {new Date(note.created_at).toLocaleString('ru-RU')}
                            </p>
                        </div>
                    ))
                )}
            </div>
        </div>
    );
}

export default NotesPage;